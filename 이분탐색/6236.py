#용돈 관리 문제


# 파라메트릭 서치(Parametric Search)
# //: '범위'내에서 원하는 조건에 부합하는 값 찾기
# // <-> 이진 탐색: 주어진 '일련의 값'들 중 원하는 값 찾기

# // ex: 배가 7시간 마다 고파지는 사람이 하루를 배부르게 지내기 위한 최소한의 식사 횟수는?
# // + 잠자는 시간을 고려하지 않음, 0끼 ~ 10끼까지의 식사 가능

# // 24시간을 식사횟수로 나눴을 때 7또는 7에 가장 가까운 값이 나오도록 하는 것.
# // 1) 범위가 0부터 10까지 이므로 (0+10)/2 = 5를 중간값 설정
# //      24/5 == 4.8 이므로 원하는 값 7보다 작음. 나누는 값이 더 작아져야하므로 4.9를 범위의 최댓값으로 설정
# // 2) 범위 [0 ~ 4.9]/2 = 2.4 (중간값) -> 24/2.4 = 10. 7보다 큼. 2.5를 최솟값 설정
# // 3) 범위 [2.5 ~ 4.9] .. 반복
# // -> 2.5-4.9(3.7) -> 2.4-3.6(3) -> 3.1-3.6(3.3) -> 3.4-3.6(3.5)
# // -> [3.4-3.4(3.4)] -> 3.4-3.3(3.3)
# // 시작값 >= 끝값 일 경우 탐색 종료. 이 직전의 값 3.4가 구하고자 하는 값.

import sys

N, M = map(int, sys.stdin.readline().split())  
expenditure = [int(sys.stdin.readline()) for _ in range(N)] 

start, end = max(expenditure), sum(expenditure)
cnt = 0 #인출 횟수
K = max(expenditure) #최소 금액 K


while start <= end:
    mid = start + end // 2
    cnt += 1 
    money = mid
    for i in expenditure:
        if i <= money: #현재 가지고 있는 돈이 그 날 써야하는 돈보다 많다면
            money -= i  #현재 가지고 있는 돈에서 그 날 써야하는 돈을 빼주기
        else:
            #현재 가지고 있는 돈으로 그 날 부족하다면
            money = mid # 인출
            cnt += 1 #인출횟수 증가
    
    if cnt > M: #인출 횟수가 M보다 많다면
        start = mid + 1 #돈이 부족했다고 판단하여 인출 금액증가
    else:
        end = mid - 1
        if K > mid:
            K = mid

print(K)


        





